#
# Below configurations are to be used with servers/applications built with :
# https://github.com/gjwdyk/NGINX-Notes/tree/main/NMS-Instance-Manager/K8sServer
#

limit_req_zone $binary_remote_addr zone=requestlimit:32k rate=3r/s;
proxy_cache_path /etc/nginx/cache keys_zone=proxycache:32k levels=1:2 inactive=3m max_size=2m;

upstream cafeone {
  zone cafeone 32k;
  server $Server1:31087;
}

upstream cafetwo {
  zone cafetwo 32k;
  server $Server1:31085;
  server $Server1:31086;
  sticky cookie serverid expires=9s;
}

upstream f5showcase {
  zone f5showcase 32k;
  server $Server1:31081;
}

upstream f5lbsample {
  zone f5lbsample 32k;
  server $Server1:31082;
  server $Server1:31083;
  server $Server1:31084;
}

# The application's code itself sometimes uses "dvwa" in its path, so don't use "dvwa" for nginx config to avoid erroneous in proxy traffic handling.
upstream openvwservice {
  zone openvwservice 32k;
  server $Server1:30081;
}

upstream whackamole {
  zone whackamole 32k;
  server $Server1:30082;
}

upstream pawnstall {
  zone pawnstall 32k;
  server $Server1:30083;
}

upstream succulent {
  zone succulent 32k;
  server $Server1:30084;
}

upstream parasiteutopia {
  zone parasiteutopia 32k;
  server $Server1:30080;
}

upstream ctf {
  zone ctf 32k;
  server $Server1:30085;
}

upstream witcherportal {
  zone witcherportal 32k;
  server $Server1:30086;
}

upstream witcherwebsocket {
  zone witcherwebsocket 32k;
  server $Server1:30087;
}



server {
  status_zone administrative;

  listen       80;
  server_name  operation.magrathea.website;

  include conf.d/openid_connect.server_conf; # Authorization code flow and Relying Party processing
  error_log /var/log/nginx/error.log debug;  # Reduce severity level as required

  location /api {
    status_zone nginxplus_api;
    # This site is protected with OpenID Connect
    auth_jwt "" token=$session_jwt;
    error_page 401 = @do_oidc_flow;

    # auth_jwt_key_file $oidc_jwt_keyfile; # Enable when using filename
    auth_jwt_key_request /_jwks_uri; # Enable when using URL

    # Successfully authenticated users are proxied to the backend, with 'sub' claim passed as HTTP header
    proxy_set_header username $jwt_claim_sub;
    access_log /var/log/nginx/access.log main_jwt;

    api write=on;
    allow all;
  }
  location / {
    status_zone nginxplus_dashboard;
    # This site is protected with OpenID Connect
    auth_jwt "" token=$session_jwt;
    error_page 401 = @do_oidc_flow;

    # auth_jwt_key_file $oidc_jwt_keyfile; # Enable when using filename
    auth_jwt_key_request /_jwks_uri; # Enable when using URL

    # Successfully authenticated users are proxied to the backend, with 'sub' claim passed as HTTP header
    proxy_set_header username $jwt_claim_sub;
    access_log /var/log/nginx/access.log main_jwt;

    root /usr/share/nginx/html;
    index dashboard.html;
  }
  location /nginx_status {
    status_zone nginxplus_stubstatus;
    # This site is protected with OpenID Connect
    auth_jwt "" token=$session_jwt;
    error_page 401 = @do_oidc_flow;

    # auth_jwt_key_file $oidc_jwt_keyfile; # Enable when using filename
    auth_jwt_key_request /_jwks_uri; # Enable when using URL

    # Successfully authenticated users are proxied to the backend, with 'sub' claim passed as HTTP header
    proxy_set_header username $jwt_claim_sub;
    access_log /var/log/nginx/access.log main_jwt;

    stub_status;
  }
}



server {
  status_zone apiserver_status;

  include conf.d/openid_connect.server_conf; # Authorization code flow and Relying Party processing
  error_log /var/log/nginx/error.log debug;  # Reduce severity level as required

  listen       80 default_server;
  server_name  membership.ggrks.click;



  location / {
    status_zone location_default;
    # This site is protected with OpenID Connect
    auth_jwt "" token=$session_jwt;
    error_page 401 = @do_oidc_flow;

    # auth_jwt_key_file $oidc_jwt_keyfile; # Enable when using filename
    auth_jwt_key_request /_jwks_uri; # Enable when using URL

    # Successfully authenticated users are proxied to the backend, with 'sub' claim passed as HTTP header
    proxy_set_header username $jwt_claim_sub;
    access_log /var/log/nginx/access.log main_jwt;

    root /usr/share/nginx/html;
    index index.html index.htm;
  }



  location /cafeone/ {
    set $application cafeone;

    # This site is protected with OpenID Connect
    auth_jwt "" token=$session_jwt;
    error_page 401 = @do_oidc_flow;

    # auth_jwt_key_file $oidc_jwt_keyfile; # Enable when using filename
    auth_jwt_key_request /_jwks_uri; # Enable when using URL

    # Successfully authenticated users are proxied to the backend, with 'sub' claim passed as HTTP header
    proxy_set_header username $jwt_claim_sub;
    access_log /var/log/nginx/access.log main_jwt;

    proxy_pass http://cafeone/;
    proxy_redirect / /$application/;
    status_zone cafeone;

    proxy_http_version 1.1;
    proxy_set_header Connection "keep-alive";
    proxy_set_header Accept-Encoding "";
    health_check interval=9 fails=3 passes=3;

    proxy_set_header If-Modified-Since "";
    proxy_set_header If-None-Match "";
    add_header Last-Modified "";
    add_header ETag "";

    limit_req zone=requestlimit;
  }



  location /cafetwo/ {
    set $application cafetwo;

    # This site is protected with OpenID Connect
    auth_jwt "" token=$session_jwt;
    error_page 401 = @do_oidc_flow;

    # auth_jwt_key_file $oidc_jwt_keyfile; # Enable when using filename
    auth_jwt_key_request /_jwks_uri; # Enable when using URL

    # Successfully authenticated users are proxied to the backend, with 'sub' claim passed as HTTP header
    proxy_set_header username $jwt_claim_sub;
    access_log /var/log/nginx/access.log main_jwt;

    proxy_pass http://cafetwo/;
    proxy_redirect / /$application/;
    status_zone cafetwo;

    proxy_http_version 1.1;
    proxy_set_header Connection "keep-alive";
    proxy_set_header Accept-Encoding "";
    health_check interval=9 fails=3 passes=3;

    proxy_set_header If-Modified-Since "";
    proxy_set_header If-None-Match "";
    add_header Last-Modified "";
    add_header ETag "";
  }



  location /f5showcase/ {
    set $application f5showcase;

    # This site is protected with OpenID Connect
    auth_jwt "" token=$session_jwt;
    error_page 401 = @do_oidc_flow;

    #auth_jwt_key_file $oidc_jwt_keyfile; # Enable when using filename
    auth_jwt_key_request /_jwks_uri; # Enable when using URL

    # Successfully authenticated users are proxied to the backend, with 'sub' claim passed as HTTP header
    proxy_set_header username $jwt_claim_sub;
    access_log /var/log/nginx/access.log main_jwt;

    proxy_pass http://f5showcase/;
    proxy_redirect / /$application/;
    status_zone f5showcase;

    proxy_http_version 1.1;
    proxy_set_header Connection "keep-alive";
    proxy_set_header Accept-Encoding "";
    health_check interval=9 fails=3 passes=3;

    proxy_set_header If-Modified-Since "";
    proxy_set_header If-None-Match "";
    add_header Last-Modified "";
    add_header ETag "";

    sub_filter_once off;
    sub_filter 'href="/' 'href="/$application/';
    sub_filter 'src="/' 'src="/$application/';
  }



  location /f5lbsample/ {
    set $application f5lbsample;

    # This site is protected with OpenID Connect
    auth_jwt "" token=$session_jwt;
    error_page 401 = @do_oidc_flow;

    #auth_jwt_key_file $oidc_jwt_keyfile; # Enable when using filename
    auth_jwt_key_request /_jwks_uri; # Enable when using URL

    # Successfully authenticated users are proxied to the backend, with 'sub' claim passed as HTTP header
    proxy_set_header username $jwt_claim_sub;
    access_log /var/log/nginx/access.log main_jwt;

    proxy_pass http://f5lbsample/;
    proxy_redirect / /$application/;
    status_zone f5lbsample;

    proxy_http_version 1.1;
    proxy_set_header Connection "keep-alive";
    proxy_set_header Accept-Encoding "";
    health_check interval=9 fails=3 passes=3;

    proxy_set_header If-Modified-Since "";
    proxy_set_header If-None-Match "";
    add_header Last-Modified "";
    add_header ETag "";

    sub_filter_once off;
    sub_filter 'href="/' 'href="/$application/';
    sub_filter 'src="/' 'src="/$application/';
  }



  #access_log  /var/log/nginx/host.access.log  main;

  #error_page  404              /404.html;
  # redirect server error pages to the static page /50x.html
  error_page   500 502 503 504  /50x.html;
  location = /50x.html {
    root   /usr/share/nginx/html;
  }

}



server {
  status_zone webserver_status;

  include conf.d/openid_connect.server_conf; # Authorization code flow and Relying Party processing
  error_log /var/log/nginx/error.log debug;  # Reduce severity level as required

  listen       80;
  server_name  subscription.aadc.link;



  location / {
    status_zone location_default;
    # This site is protected with OpenID Connect
    auth_jwt "" token=$session_jwt;
    error_page 401 = @do_oidc_flow;

    # auth_jwt_key_file $oidc_jwt_keyfile; # Enable when using filename
    auth_jwt_key_request /_jwks_uri; # Enable when using URL

    # Successfully authenticated users are proxied to the backend, with 'sub' claim passed as HTTP header
    proxy_set_header username $jwt_claim_sub;
    access_log /var/log/nginx/access.log main_jwt;

    root /usr/share/nginx/html;
    index index.html index.htm;
  }



  # The application's code itself sometimes uses "dvwa" in its path, so don't use "dvwa" for nginx config to avoid erroneous in proxy traffic handling.
  location /openvwservice/ {
    set $application openvwservice;

    # This site is protected with OpenID Connect
    auth_jwt "" token=$session_jwt;
    error_page 401 = @do_oidc_flow;

    #auth_jwt_key_file $oidc_jwt_keyfile; # Enable when using filename
    auth_jwt_key_request /_jwks_uri; # Enable when using URL

    # Successfully authenticated users are proxied to the backend, with 'sub' claim passed as HTTP header
    proxy_set_header username $jwt_claim_sub;
    access_log /var/log/nginx/access.log main_jwt;

    proxy_pass http://openvwservice/;
    proxy_redirect / /$application/;
    status_zone openvwservice;

    proxy_http_version 1.1;
    proxy_set_header Connection "keep-alive";
    proxy_set_header Accept-Encoding "";
    health_check interval=9 fails=3 passes=3;

    proxy_set_header If-Modified-Since "";
    proxy_set_header If-None-Match "";
    add_header Last-Modified "";
    add_header ETag "";

    sub_filter_once off;
    sub_filter 'href=\'/' 'href=\'/$application/';
    sub_filter 'src=\'/' 'src=\'/$application/';
  }



  location /whackamole/ {
    set $application whackamole;

    # This site is protected with OpenID Connect
    auth_jwt "" token=$session_jwt;
    error_page 401 = @do_oidc_flow;

    #auth_jwt_key_file $oidc_jwt_keyfile; # Enable when using filename
    auth_jwt_key_request /_jwks_uri; # Enable when using URL

    # Successfully authenticated users are proxied to the backend, with 'sub' claim passed as HTTP header
    proxy_set_header username $jwt_claim_sub;
    access_log /var/log/nginx/access.log main_jwt;

    proxy_pass http://whackamole/;
    proxy_redirect / /$application/;
    status_zone whackamole;

    proxy_http_version 1.1;
    proxy_set_header Connection "keep-alive";
    proxy_set_header Accept-Encoding "";
    health_check interval=9 fails=3 passes=3;

    proxy_set_header If-Modified-Since "";
    proxy_set_header If-None-Match "";
    add_header Last-Modified "";
    add_header ETag "";

    sub_filter_once off;
    sub_filter_types text/css text/javascript application/javascript;
    sub_filter 'href="/' 'href="/$application/';
    sub_filter 'href = "/' 'href="/$application/';
    sub_filter 'src="/' 'src="/$application/';
    sub_filter 'action="/' 'action="/$application/';
    sub_filter 'url:\'/' 'url:\'/$application/';
    sub_filter 'url: \'/' 'url:\'/$application/';
    sub_filter 'ajax(\'/' 'ajax(\'/$application/';         # Specific for "Wish List"
    sub_filter 'location.pathname = \'/' 'location.pathname=\'/$application/';         # Specific for "Wish List"

    sub_filter 'helpdesk\"' 'helpdesk/\"';         # Specific for "Helpdesk" sub-menu under "Your account" menu

    proxy_set_header Referer "http:/$request_uri";         # Specific for "Register" new account
  }



  location /pawnstall/ {
    set $application pawnstall;

    # This site is protected with OpenID Connect
    auth_jwt "" token=$session_jwt;
    error_page 401 = @do_oidc_flow;

    #auth_jwt_key_file $oidc_jwt_keyfile; # Enable when using filename
    auth_jwt_key_request /_jwks_uri; # Enable when using URL

    # Successfully authenticated users are proxied to the backend, with 'sub' claim passed as HTTP header
    proxy_set_header username $jwt_claim_sub;
    access_log /var/log/nginx/access.log main_jwt;

    proxy_pass http://pawnstall/;
    proxy_redirect / /$application/;
    status_zone pawnstall;

    proxy_http_version 1.1;
    proxy_set_header Connection "keep-alive";
    proxy_set_header Accept-Encoding "";
    health_check interval=9 fails=3 passes=3;

    proxy_set_header If-Modified-Since "";
    proxy_set_header If-None-Match "";
    add_header Last-Modified "";
    add_header ETag "";

    sub_filter_once off;
    sub_filter 'href="/' 'href="/$application/';
    sub_filter 'src="/' 'src="/$application/';
    sub_filter 'action="/' 'action="/$application/';
  }



  location /succulent/ {
    set $application succulent;

    # This site is protected with OpenID Connect
    auth_jwt "" token=$session_jwt;
    error_page 401 = @do_oidc_flow;

    #auth_jwt_key_file $oidc_jwt_keyfile; # Enable when using filename
    auth_jwt_key_request /_jwks_uri; # Enable when using URL

    # Successfully authenticated users are proxied to the backend, with 'sub' claim passed as HTTP header
    proxy_set_header username $jwt_claim_sub;
    access_log /var/log/nginx/access.log main_jwt;

    proxy_pass http://succulent/;
    proxy_redirect / /$application/;
    status_zone succulent;

    proxy_http_version 1.1;
    proxy_set_header Connection "keep-alive";
    proxy_set_header Accept-Encoding "";
    health_check interval=9 fails=3 passes=3;

    proxy_set_header If-Modified-Since "";
    proxy_set_header If-None-Match "";
    add_header Last-Modified "";
    add_header ETag "";

    sub_filter_once off;
    sub_filter_types text/css text/javascript application/javascript;
    sub_filter 'src="/' 'src="/$application/';
  }



  location /parasiteutopia/ {
    set $application parasiteutopia;

    # This site is protected with OpenID Connect
    auth_jwt "" token=$session_jwt;
    error_page 401 = @do_oidc_flow;

    #auth_jwt_key_file $oidc_jwt_keyfile; # Enable when using filename
    auth_jwt_key_request /_jwks_uri; # Enable when using URL

    # Successfully authenticated users are proxied to the backend, with 'sub' claim passed as HTTP header
    proxy_set_header username $jwt_claim_sub;
    access_log /var/log/nginx/access.log main_jwt;

    proxy_pass http://parasiteutopia/;
    proxy_redirect / /$application/;
    status_zone parasiteutopia;

    proxy_http_version 1.1;
    proxy_set_header Connection "keep-alive";
    proxy_set_header Accept-Encoding "";
    health_check interval=9 fails=3 passes=3;

    proxy_set_header If-Modified-Since "";
    proxy_set_header If-None-Match "";
    add_header Last-Modified "";
    add_header ETag "";

    sub_filter_once off;
    sub_filter 'url: "/' 'url:"/$application/';
    sub_filter 'url: \'/' 'url:\'/$application/';
  }



  #access_log  /var/log/nginx/host.access.log  main;

  #error_page  404              /404.html;
  # redirect server error pages to the static page /50x.html
  error_page   500 502 503 504  /50x.html;
  location = /50x.html {
    root   /usr/share/nginx/html;
  }

}



#
# Require DNS or modify hosts file as follow:
#
# 192.168.123.101 ctf.magrathea.website
# 192.168.123.101 witcher.magrathea.website
# 192.168.123.101 wsr.magrathea.website
#
# where 192.168.123.101 is IP Address of this NGINX instance.
#

server {
  status_zone ctf_server;

  listen       80;
  server_name  ctf.magrathea.website;

  error_log /var/log/nginx/error.log debug;

  location / {
    status_zone ctf;

    proxy_pass http://ctf/;
    proxy_http_version 1.1;
    proxy_set_header Connection "keep-alive";
    proxy_set_header Accept-Encoding "";
    health_check interval=9 fails=3 passes=3;

    proxy_set_header If-Modified-Since "";
    proxy_set_header If-None-Match "";
    add_header Last-Modified "";
    add_header ETag "";
  }
}

server {
  status_zone witcher_server;

  listen       80;
  server_name  witcher.magrathea.website;

  error_log /var/log/nginx/error.log debug;

  location = /favicon.ico {
    root /usr/share/nginx/html;
  }

  location / {
    status_zone witcherportal;

    proxy_pass http://witcherportal/;
    proxy_http_version 1.1;
    proxy_set_header Connection "keep-alive";
    proxy_set_header Accept-Encoding "";
    health_check interval=9 fails=3 passes=3;

    proxy_set_header If-Modified-Since "";
    proxy_set_header If-None-Match "";
    add_header Last-Modified "";
    add_header ETag "";
  }
}

map $http_upgrade $connection_upgrade {
  default upgrade;
  '' close;
}

server {
  status_zone witcher_websocket_wsr;

  listen       8080;
  server_name  wsr.magrathea.website;

  error_log /var/log/nginx/error.log debug;

  location / {
    status_zone witcherwebsocket_wsr;

    proxy_pass http://witcherwebsocket/;
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection $connection_upgrade;
    proxy_set_header Host $host;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

    # health_check interval=9 fails=3 passes=3;
  }
}


